buildscript {
    ext {
        kotlin_version = '2.0.0'
    }
    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "jacoco"
    id "org.sonarqube" version "3.5.0.2730"
    id 'org.jetbrains.kotlin.android' version '2.0.0'
    id 'org.jetbrains.kotlin.plugin.compose' version '2.0.0'
}

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply plugin: 'com.android.application'

android {
    compileSdkVersion 34
    namespace "org.billthefarmer.editor"

    defaultConfig {
        applicationId "org.billthefarmer.editor"
        minSdkVersion 21
        targetSdkVersion 30
        versionName "1.96"
        versionCode 196

        buildConfigField "long", "BUILT", System.currentTimeMillis() + "L"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    lintOptions {
        disable 'ContentDescription', 'OldTargetApi', 'UnusedResources',
                'NonConstantResourceId', 'ExpiredTargetSdkVersion', 'AndroidGradlePluginVersion'
        // abortOnError false
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            finalizedBy jacocoTestReport
        }
    }

    packagingOptions { resources.excludes.add("META-INF/*") }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    reports {
        xml.enabled true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

sonarqube {
    properties {
        property "sonar.coverage.exclusions", ""
        property "sonar.projectKey", "marty-byrde"
        property "sonar.java.coveragePlugin", "jacoco"

        property "sonar.issue.ignore.block", "e1"
        property "sonar.issue.ignore.block.e1.beginBlockRegexp", "\\s*//\\s*START-NOSCAN"
        property "sonar.issue.ignore.block.e1.endBlockRegexp", "\\s*//\\s*END-NOSCAN"

    }
}

dependencies {
    // Used by the Editor
    implementation 'org.commonmark:commonmark:0.22.0'

    // Android Compose for Kotlin Compiler
    implementation 'androidx.compose.runtime:runtime:1.7.5'

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.4'

    // Local Tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'io.mockk:mockk:1.13.8'
    testImplementation "com.google.truth:truth:1.2.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.0-RC2'

    // Instrumented Tests
    // Kotlin Coroutines testing support (we added this in the last tutorial)
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.0-RC2'

    // Since this needs to run on an Android device we must add this one to get the RunWith(AndroidJUnit4::class)
    androidTestImplementation "androidx.test.ext:junit:1.1.5"

    // To test LiveData we also need Arch Core
    androidTestImplementation "androidx.arch.core:core-testing:2.2.0"

    // Assertion library for more readable assertions
    androidTestImplementation "com.google.truth:truth:1.2.0"

    // Espresso Core - needed for AndroidJUnit4 runner
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.6.2"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

}


